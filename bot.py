import os
import logging
import re
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, ConversationHandler
import time
from dotenv import load_dotenv

# Config
load_dotenv()
TELEGRAM_API_TOKEN = os.getenv("TELEGRAM_API_TOKEN")
TARGET_GROUP_ID = os.getenv("TARGET_GROUP_ID")  # ID –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π

# States for ConversationHandler
ASK_PHONE, ASK_SCREENSHOT = range(2)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def start_keyboard():
    return ReplyKeyboardMarkup(
        [[KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def start(update: Update, context: CallbackContext):
    logger.info(f"User {update.effective_user.id} started the bot")
    update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–µ—Ä–µ–Ω–æ—Å–∞ –±–æ–Ω—É—Å–æ–≤ Subway!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞.",
        reply_markup=start_keyboard()
    )
    return ASK_PHONE

def is_valid_phone(phone: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    phone = re.sub(r'\D', '', phone)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 10-15 —Ü–∏—Ñ—Ä)
    return 10 <= len(phone) <= 15

def ask_screenshot(update: Update, context: CallbackContext):
    logger.info(f"User {update.effective_user.id} sent phone number")
    if update.message.contact:
        phone = update.message.contact.phone_number
        logger.info(f"Phone number from contact: {phone}")
    else:
        phone = update.message.text
        logger.info(f"Phone number from text: {phone}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if not is_valid_phone(phone):
            update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                reply_markup=start_keyboard()
            )
            return ASK_PHONE
    
    context.user_data['phone'] = phone
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Subway —Å –≤–∞—à–∏–º –±–æ–Ω—É—Å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º.\n\n"
        "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç:\n"
        "1. –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Ç–∞—Ä–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Subway\n"
        "2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç—Ä–∏ –ø–æ–ª–æ—Å–∫–∏ (–º–µ–Ω—é) –≤ –≤–µ—Ä—Ö–Ω–µ–º –ª–µ–≤–æ–º —É–≥–ª—É\n"
        "3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–≤–æ–µ –∏–º—è/–ø—Ä–æ—Ñ–∏–ª—å\n"
        "4. –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞ —Å –±–∞–ª–∞–Ω—Å–æ–º –±–æ–Ω—É—Å–æ–≤\n\n"
        "–í–æ—Ç –ø—Ä–∏–º–µ—Ä —Ç–æ–≥–æ, –∫–∞–∫ –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç:"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    update.message.reply_photo(
        photo='AgACAgIAAxkBAAIBsmhQLP_7jf7e8WPjy_MziDZmE7XNAAJm-DEbNSWBSqmshIIrHby9AQADAgADeQADNgQ',
        caption="–ü—Ä–∏–º–µ—Ä —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–æ–º –±–æ–Ω—É—Å–æ–≤"
    )
    
    return ASK_SCREENSHOT

def handle_screenshot(update: Update, context: CallbackContext):
    logger.info(f"User {update.effective_user.id} sent a photo")
    if not update.message.photo:
        logger.warning("User sent message without photo")
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç (—Ñ–æ—Ç–æ) –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")
        return ASK_SCREENSHOT

    # Get user information
    user = update.message.from_user
    phone = context.user_data.get('phone', 'Unknown')
    
    # Prepare message text
    message_text = (
        f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å –±–æ–Ω—É—Å–æ–≤!\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} {user.last_name if user.last_name else ''}\n"
        f"üÜî Telegram ID: {user.id}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"üë§ Username: @{user.username if user.username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
    )

    try:
        # Forward the photo and message to the target group
        context.bot.send_photo(
            chat_id=TARGET_GROUP_ID,
            photo=update.message.photo[-1].file_id,
            caption=message_text
        )
        
        update.message.reply_text("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ù–∞—à–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
        logger.info(f"Successfully forwarded information to group {TARGET_GROUP_ID}")
        
    except Exception as e:
        logger.error(f"Error forwarding message to group: {str(e)}")
        update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    return ConversationHandler.END

def cancel(update: Update, context: CallbackContext):
    logger.info(f"User {update.effective_user.id} cancelled the operation")
    update.message.reply_text('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥–∏—Ç–µ /start.')
    return ConversationHandler.END

def error_handler(update: Update, context: CallbackContext):
    logger.error(f"Update {update} caused error {context.error}")

def get_file_id(update: Update, context: CallbackContext):
    if update.message.photo:
        file_id = update.message.photo[-1].file_id
        update.message.reply_text(f"File ID: {file_id}")

def main():
    logger.info("Starting bot...")
    updater = Updater(TELEGRAM_API_TOKEN)
    dp = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('start', start),
            MessageHandler(Filters.text & ~Filters.command, start)  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        ],
        states={
            ASK_PHONE: [MessageHandler(Filters.contact | Filters.text & ~Filters.command, ask_screenshot)],
            ASK_SCREENSHOT: [MessageHandler(Filters.photo, handle_screenshot)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    dp.add_handler(conv_handler)
    dp.add_error_handler(error_handler)

    logger.info("Bot is running...")
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
